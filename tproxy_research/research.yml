---
- hosts: 'gateway:service:hypervisor:guest'
  gather_facts: true
  tasks: []

- hosts: 'gateway'
  tasks:
    - apt:
        name: [iproute2, iptables]
        update_cache: true

    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        - func: iptables_cmd
          opts: { table: nat, chain: POSTROUTING }
          args: >-
            -o eth0
            -j MASQUERADE

- hosts: 'service:hypervisor:guest'
  serial: 2
  tasks:
    - apt:
        name: [gcc, iproute2, iptables, make, nftables, ruby, ruby-dev]
        update_cache: true

    - gem:
        name: "{{ item.name }}"
        version: "{{ item.version | d(omit) }}"
        user_install: false
      loop:
        - name: console
          version: 1.15.3
        - name: async-io
          version: 1.32.1
        - name: daemons

- hosts: 'service'
  tasks:
    - copy:
        dest: /echosvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.rb"
      register: copy_echosvc_rb

    - template:
        dest: /etc/systemd/system/echosvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.service"
      register: template_echosvc_service

    - systemd:
        name: echosvc.service
        state: restarted
        enabled: true
        daemon_reload: true
      when: (copy_echosvc_rb is changed) or (template_echosvc_service is changed)

- hosts: 'hypervisor'
  tasks:
    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        # remove ip address from the bridge
        - func: identity
          opts: {}
          args: >-
            ip address flush br1
        - func: identity
          opts: {}
          args: >-
            for NIC in all br1; do echo 0 > /proc/sys/net/ipv4/conf/$NIC/rp_filter; done
        # intercept 169.254.16.9:5030-destined packets and redirect them to the local
        # machine so they can be further processed in iptables
        # NOTE: this removes the requirement for adding route for 169.254.16.9 in guests
        - func: nft_cmd
          opts: {}
          args: |
            table bridge one_tproxy {
              chain br1 {
                type filter hook prerouting priority dstnat; policy accept;
              }
            }

            flush chain bridge one_tproxy br1

            table bridge one_tproxy {
              chain br1 {
                meta ibrname "br1" ip daddr 169.254.16.9 tcp dport 1234 counter \
                meta pkttype set host ether daddr set {{ ansible_facts.br1.macaddress }} accept
                meta ibrname "br1" ip daddr 169.254.16.9 tcp dport 5030 counter \
                meta pkttype set host ether daddr set {{ ansible_facts.br1.macaddress }} accept
             }
            }
        - func: nft_cmd
          opts: {}
          args: |
            table ip one_tproxy {
              map proxies {
                type ifname . ipv4_addr . inet_service : inet_service . ipv4_addr . inet_service . mark;
                elements = {
                  "br1" . 169.254.16.9 . 1234 : 4321 . 10.2.51.21 . 3640 . 16002,
                  "br1" . 169.254.16.9 . 5030 : 7777 . 10.2.51.21 . 3640 . 16002,
                }
              }
              chain br1 {
                type filter hook prerouting priority mangle; policy accept;
              }
            }

            flush chain ip one_tproxy br1

            table ip one_tproxy {
              chain br1 {
                iifname "br1" meta l4proto tcp ip daddr 169.254.16.9 tcp dport 1234 counter \
                mark set 16001 \
                tproxy to 127.0.0.1:4321
                iifname "br1" meta l4proto tcp ip daddr 169.254.16.9 tcp dport 5030 counter \
                mark set 16001 \
                tproxy to 127.0.0.1:7777
              }
            }
        # routing rules to handle requests
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            local default
            dev lo
            table 16001
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 16001
            lookup 16001
        # routing rules to handle responses
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            default
            dev br1
            table 16002
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 16002
            lookup 16002

    - copy:
        dest: /proxysvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/proxysvc.rb"

    - shell:
        cmd: >-
          ruby /proxysvc.rb restart

- hosts: 'guest'
  tasks:
    - copy:
        dest: /beaconsvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.rb"

    - template:
        dest: /etc/systemd/system/beaconsvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.service"

    - systemd:
        name: beaconsvc.service
        state: restarted
        enabled: true
        daemon_reload: true
