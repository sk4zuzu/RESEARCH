---
- hosts: 'gateway:service:hypervisor:guest'
  gather_facts: true
  tasks: []

- hosts: 'gateway'
  tasks:
    - apt:
        name: [iproute2, iptables]
        update_cache: true

    - shell:
        cmd: "{{ item.cmd }}"
      loop:
        - cmd: >-
            iptables-nft -t nat -A POSTROUTING
            -o eth0
            -j MASQUERADE

- hosts: 'service:hypervisor:guest'
  serial: 2
  tasks:
    - apt:
        name: [ebtables, gcc, iproute2, iptables, make, ruby, ruby-dev]
        update_cache: true

    - gem:
        name: async-io
        version: 1.42.1
        user_install: false

- hosts: 'service'
  tasks:
    - copy:
        dest: /echosvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.rb"
      register: copy_echosvc_rb

    - template:
        dest: /etc/systemd/system/echosvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.service"
      register: template_echosvc_service

    - systemd:
        name: echosvc.service
        state: restarted
        enabled: true
        daemon_reload: true
      when: (copy_echosvc_rb is changed) or (template_echosvc_service is changed)

- hosts: 'hypervisor'
  tasks:
    - shell:
        cmd: "{{ item.cmd }}"
      loop:
        # remove ip address from the bridge
        - cmd: >-
            ip address flush br1
        # intercept 169.254.16.9:5030-destined packets and redirect them to the local
        # machine so they can be further processed in iptables
        # NOTE: this removes the requirement for adding route for 169.254.16.9 in guests
        - cmd: >-
            ebtables-nft -t nat -A PREROUTING
            --logical-in br1
            -p ipv4
            --ip-proto tcp
            --ip-dst 169.254.16.9
            --ip-dport 5030
            -j redirect
            --redirect-target ACCEPT
        # enable the usual TPROXY-like processing (redirect to 127.0.0.1:7777)
        - cmd: >-
            iptables-nft -t mangle -A PREROUTING
            -p tcp -m tcp
            -d 169.254.16.9
            --dport 5030
            -j TPROXY
            --on-ip 127.0.0.1
            --on-port 7777
            --tproxy-mark 0x13a6/0xffffffff
        - cmd: >-
            ip rule add fwmark 0x13a6/0xffffffff lookup 5030
        - cmd: >-
            ip route add local 0.0.0.0/0 dev lo table 5030
        # routing rules to handle responses
        - cmd: >-
            ip rule add fwmark 0x21ee/0xffffffff lookup 8686
        - cmd: >-
            ip route add default dev br1 table 8686
        - cmd: >-
            for NIC in all br1; do echo 0 > /proc/sys/net/ipv4/conf/$NIC/rp_filter; done

    - copy:
        dest: /proxysvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/proxysvc.rb"
      register: copy_proxysvc_rb

    - template:
        dest: /etc/systemd/system/proxysvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/proxysvc.service"
      register: template_proxysvc_service

    - systemd:
        name: proxysvc.service
        state: restarted
        enabled: true
        daemon_reload: true
      when: (copy_proxysvc_rb is changed) or (template_proxysvc_service is changed)

- hosts: 'guest'
  tasks:
    - copy:
        dest: /beaconsvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.rb"

    - template:
        dest: /etc/systemd/system/beaconsvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.service"

    - systemd:
        name: beaconsvc.service
        state: restarted
        enabled: true
        daemon_reload: true
