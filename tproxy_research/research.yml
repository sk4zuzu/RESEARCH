---
- hosts: 'gateway:service:hypervisor:guest'
  gather_facts: true
  tasks: []

- hosts: 'gateway'
  tasks:
    - apt:
        name: [iproute2, iptables]
        update_cache: true

    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        - func: iptables_cmd
          opts: { table: nat, chain: POSTROUTING }
          args: >-
            -o eth0
            -j MASQUERADE

- hosts: 'service:hypervisor:guest'
  serial: 2
  tasks:
    - apt:
        name: [gcc, iproute2, iptables, make, nftables, ruby, ruby-dev]
        update_cache: true

    - gem:
        name: async-io
        version: 1.42.1
        user_install: false

- hosts: 'service'
  tasks:
    - copy:
        dest: /echosvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.rb"
      register: copy_echosvc_rb

    - template:
        dest: /etc/systemd/system/echosvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/echosvc.service"
      register: template_echosvc_service

    - systemd:
        name: echosvc.service
        state: restarted
        enabled: true
        daemon_reload: true
      when: (copy_echosvc_rb is changed) or (template_echosvc_service is changed)

- hosts: 'hypervisor'
  tasks:
    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        # remove ip address from the bridge
        - func: identity
          opts: {}
          args: >-
            ip address flush br1
        - func: identity
          opts: {}
          args: >-
            for NIC in all br1; do echo 0 > /proc/sys/net/ipv4/conf/$NIC/rp_filter; done
        # intercept 169.254.16.9:5030-destined packets and redirect them to the local
        # machine so they can be further processed in iptables
        # NOTE: this removes the requirement for adding route for 169.254.16.9 in guests
        - func: nft_cmd
          opts: {}
          args: >-
            add table bridge one_tproxy;
            add chain bridge one_tproxy br1 { type filter hook prerouting priority dstnat; policy accept; };
            add set bridge one_tproxy br1_dports { typeof tcp dport; };
            add element bridge one_tproxy br1_dports { 1234, 5030 };
            flush chain bridge one_tproxy br1;
            add rule bridge one_tproxy br1 meta ibrname "br1" ip daddr 169.254.16.9 tcp dport @br1_dports counter meta pkttype set host ether daddr set {{ ansible_facts.br1.macaddress }} accept;

    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        # routing rules to handle responses
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            default
            dev br1
            table 7777
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 7777
            lookup 7777
        # routing rules to handle responses
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            default
            dev br1
            table 4321
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 4321
            lookup 4321

    - shell:
        cmd: "{{ [item.args] | map(item.func, **item.opts) | first }}"
      loop:
        # enable the usual TPROXY-like processing (redirect to 127.0.0.1:7777)
        - func: iptables_cmd
          opts: { table: mangle, chain: PREROUTING }
          args: >-
            -p tcp -m tcp
            -d 169.254.16.9
            --dport 5030
            -j TPROXY
            --on-ip 127.0.0.1
            --on-port 7777
            --tproxy-mark 5030
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            local 0/0
            dev lo
            table 5030
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 5030
            lookup 5030
        # enable the usual TPROXY-like processing (redirect to 127.0.0.1:4321)
        - func: iptables_cmd
          opts: { table: mangle, chain: PREROUTING }
          args: >-
            -p tcp -m tcp
            -d 169.254.16.9
            --dport 1234
            -j TPROXY
            --on-ip 127.0.0.1
            --on-port 4321
            --tproxy-mark 1234
        - func: ip_route_replace_cmd
          opts: {}
          args: >-
            local 0/0
            dev lo
            table 1234
        - func: ip_rule_replace_cmd
          opts: {}
          args: >-
            fwmark 1234
            lookup 1234

    - copy:
        dest: /proxysvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/proxysvc.rb"
      register: copy_proxysvc_rb

    - template:
        dest: /etc/systemd/system/proxysvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/proxysvc.service"
      register: template_proxysvc_service

    - systemd:
        name: proxysvc.service
        state: restarted
        enabled: true
        daemon_reload: true
      when: (copy_proxysvc_rb is changed) or (template_proxysvc_service is changed)

- hosts: 'guest'
  tasks:
    - copy:
        dest: /beaconsvc.rb
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.rb"

    - template:
        dest: /etc/systemd/system/beaconsvc.service
        mode: u=rw,go=r
        src: "{{ playbook_dir }}/beaconsvc.service"

    - systemd:
        name: beaconsvc.service
        state: restarted
        enabled: true
        daemon_reload: true
