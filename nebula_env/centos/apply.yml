---
- hosts: all
  tasks:
    - copy:
        dest: /etc/yum.repos.d/opennebula.repo
        content: |
          [opennebula]
          name=OpenNebula Enterprise Edition
          baseurl=https://{{ ee_token }}@enterprise.opennebula.io/repo/{{ ee_version }}/CentOS/7/$basearch
          enabled=1
          gpgkey=https://downloads.opennebula.io/repo/repo.key
          gpgcheck=1
          repo_gpgcheck=1

- hosts: opennebula
  tasks:
    - shell: |
        set -o errexit
        yum install -y mariadb-server
        systemctl start mariadb.service

    - shell: |
        set -o errexit
        mysql -u root <<< "CREATE DATABASE IF NOT EXISTS opennebula CHARACTER SET utf8 COLLATE utf8_general_ci;"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'%' IDENTIFIED BY 'asd';"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'localhost' IDENTIFIED BY 'asd';"
        mysql -u root <<< "SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;"

- hosts: opennebula
  tasks:
    - shell: |
        set -o errexit
        yum install -y opennebula{,-server,-sunstone,-ruby,-gate,-flow}
        {% if ee_version is version('5.13', '>=') %}
        yum install -y centos-release-scl
        yum install -y opennebula{-provision,-fireedge}
        {% endif %}

    - vars:
        DB: |
          DB = [ backend = "mysql",
                 server = "localhost",
                 port = 0,
                 user = "oneadmin",
                 passwd = "asd",
                 db_name = "opennebula" ]
      shell: |
        set -o errexit
        sed -i '/^DB = \[ BACKEND = "sqlite" \]/d' /etc/one/oned.conf
        if ! grep ^DB /etc/one/oned.conf; then
          echo "{{ DB }}" >> /etc/one/oned.conf
        fi

    - shell: |
        set -o errexit
        if ! grep '^oneadmin:asd$' /var/lib/one/.one/one_auth; then
          echo 'oneadmin:asd' >/var/lib/one/.one/one_auth
        fi

    - shell: |
        set -o errexit
        systemctl start opennebula
        systemctl start opennebula-sunstone
        {% if ee_version is version('5.13', '>=') %}
        systemctl start opennebula-fireedge
        {% endif %}

- hosts: opennebula-node-kvm
  tasks:
    - shell: |
        set -o errexit
        yum install -y opennebula-node-kvm

    - shell: |
        set -o errexit
        systemctl restart libvirtd
        if virsh net-dumpxml default; then
          virsh net-destroy default
          virsh net-undefine default
        fi

    - shell: |
        set -o errexit
        cat > /etc/sysconfig/network-scripts/ifcfg-brpub <<EOF
        DEVICE="brpub"
        BOOTPROTO="static"
        IPADDR="172.20.0.1"
        NETMASK="255.255.255.0"
        ONBOOT="yes"
        TYPE="Bridge"
        NM_CONTROLLED="no"
        EOF
        systemctl restart network
      args:
        creates: /etc/sysconfig/network-scripts/ifcfg-brpub

- hosts: opennebula
  tasks:
    - copy:
        dest: /tmp/brpub
        content: |
          NAME   = "brpub"
          VN_MAD = "bridge"
          BRIDGE = "brpub"
          AR=[
            TYPE = "IP4",
            IP   = "172.20.0.100",
            SIZE = "100"
          ]
          NETWORK_ADDRESS = "172.20.0.0"
          NETWORK_MASK    = "255.255.255.0"
          GATEWAY         = "172.20.0.1"
          DNS             = "1.1.1.1"
          SEARCH_DOMAIN   = "centos.lh"

    - shell: |
        set -o errexit
        if ! onevntemplate show brpub; then
          onevntemplate create /tmp/brpub
        fi
        if ! onevnet show brpub; then
          onevntemplate instantiate brpub --name brpub
        fi

    - shell: |
        set -o errexit
        onemarketapp export 'Alpine Linux 3.14' alpine314 --datastore default || true
        onetemplate update -a alpine314 /dev/fd/0 <<EOF
        CONTEXT=[
          NETWORK="YES",
          SSH_PUBLIC_KEY="$SSH_PUBLIC_KEY" ]
        EOF
      environment:
        SSH_PUBLIC_KEY: "{{ ssh_public_key }}"

- hosts: opennebula
  pre_tasks:
    - copy:
        dest: /var/lib/one/.ssh/config
        owner: oneadmin
        group: oneadmin
        mode: u=rw,go=
        content: |
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null

    - slurp:
        src: /var/lib/one/.ssh/id_rsa.pub
      register: slurp_id_rsa_pub

    - authorized_key:
        user: oneadmin
        key: "{{ slurp_id_rsa_pub.content | b64decode }}"
        state: present
      delegate_to: "{{ item }}"
      loop: "{{ groups['opennebula-node-kvm'] }}"

- hosts: opennebula
  tasks:
    - shell: |
        set -o errexit
        {% for host in groups['opennebula-node-kvm'] %}
        if ! onehost show {{ host }}; then
          onehost create {{ host }} -i kvm -v kvm
        fi
        {% endfor %}
