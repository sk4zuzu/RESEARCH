---
- hosts: opennebula[0]:kvm:firecracker:lxc
  module_defaults: &module_defaults
    shell: { executable: /bin/bash }
  environment: &environment
    DEBIAN_FRONTEND: noninteractive
  gather_facts: true
  tasks: []

- hosts: opennebula[0]:kvm:firecracker:lxc
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit -o pipefail
        curl -fsSL https://downloads.opennebula.io/repo/repo.key | apt-key add -

    - copy:
        dest: /etc/apt/sources.list.d/opennebula.list
        content: |
          deb https://{{ ee_token }}@enterprise.opennebula.io/repo/{{ ee_version }}/Ubuntu/{{ ubuntu_version | default('20.04') }} stable opennebula

    - shell: |
        set -o errexit
        apt-get -q update -y

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y mariadb-server
        systemctl start mariadb.service

    - shell: |
        set -o errexit
        mysql -u root <<< "CREATE DATABASE IF NOT EXISTS opennebula CHARACTER SET utf8 COLLATE utf8_general_ci;"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'%' IDENTIFIED BY 'asd';"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'localhost' IDENTIFIED BY 'asd';"
        mysql -u root <<< "SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;"

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y opennebula{,-flow,-gate,-provision,-rubygems,-sunstone}
        {% if ee_version is version('6.0', '>=') %}
        apt-get -q install -y opennebula-fireedge
        {% endif %}

    - user:
        name: one
        home: /home/one
        shell: /bin/bash
        system: false

    - shell: |
        set -o errexit
        if ! grep '^oneadmin:asd$' {{ item.home }}/.one/one_auth; then
          install -o {{ item.owner }} -g {{ item.group }} -m u=rwx,g=rx,o= -d {{ item.home }}/.one/
          install -o {{ item.owner }} -g {{ item.group }} -m u=rw,g=r,o= /dev/fd/0 {{ item.home }}/.one/one_auth <<< 'oneadmin:asd'
        fi
      loop:
        - { owner: oneadmin, group: oneadmin, home: /var/lib/one/ }
        - { owner: one     , group: one     , home: /home/one/    }

    - environment:
        DB: |
          DB = [ backend = "mysql",
                 server = "localhost",
                 port = 0,
                 user = "oneadmin",
                 passwd = "asd",
                 db_name = "opennebula" ]
      shell: |
        set -o errexit
        gawk -i inplace -v DB="$DB" -f- /etc/one/oned.conf <<'EOF'
        /^DB = /,/^\]/ { next }
        { print }
        END { print DB >>FILENAME }
        EOF

    - vars: { _endpoint: "http://{{ hostvars[groups.opennebula.0].ansible_host }}:5030" }
      shell: |
        set -o errexit
        gawk -i inplace -f- /etc/one/oned.conf <<'EOF'
        BEGIN { update = "ONEGATE_ENDPOINT = \"{{ _endpoint }}\"" }
        /^#*ONEGATE_ENDPOINT[^=]*=/ { $0 = update; found = 1 }
        { print }
        END { if (!found) print update >>FILENAME }
        EOF

    - vars: { _endpoint: "http://{{ hostvars[groups.opennebula.0].ansible_host }}:2616" }
      shell: |
        set -o errexit
        gawk -i inplace -f- /etc/one/sunstone-server.conf <<'EOF'
        BEGIN { update = ":public_fireedge_endpoint: {{ _endpoint }}" }
        /^#*:public_fireedge_endpoint:/ { $0 = update; found = 1 }
        { print }
        END { if (!found) print update >>FILENAME }
        EOF

    - vars: { _endpoint: "0.0.0.0" }
      shell: |
        set -o errexit
        gawk -i inplace -f- '{{ item }}' <<'EOF'
        BEGIN { update = ":host: {{ _endpoint }}" }
        /^#*:host:/ { $0 = update; found = 1 }
        { print }
        END { if (!found) print update >>FILENAME }
        EOF
      loop:
        - /etc/one/oneflow-server.conf
        - /etc/one/onegate-server.conf

    - shell: |
        set -o errexit
        gawk -i inplace -f- /etc/one/monitord.conf <<'EOF'
        BEGIN { update = "MONITOR_ADDRESS = \"{{ ansible_host }}\"," }
        /^NETWORK = /,/^\]/ { if ($1 == "MONITOR_ADDRESS") $0 = update }
        { print }
        EOF

    - shell: |
        set -o errexit
        systemctl enable opennebula{,-flow,-gate,-sunstone}
        systemctl restart opennebula{,-flow,-gate,-sunstone}
        {% if ee_version is version('6.0', '>=') %}
        systemctl enable opennebula-fireedge
        systemctl restart opennebula-fireedge
        {% endif %}

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        onedatastore update 1 /dev/fd/0 <<'EOF'
        DS_MAD="fs"
        TM_MAD="qcow2"
        EOF
        onedatastore update 0 /dev/fd/0 <<'EOF'
        TM_MAD="qcow2"
        EOF

    - shell: |
        set -o errexit
        gawk -i inplace -f- /var/lib/one/remotes/etc/vmm/kvm/kvmrc <<'EOF'
        BEGIN { update = "MIGRATE_OPTIONS=--unsafe" }
        /^#*MIGRATE_OPTIONS=/ { $0 = update; found = 1 }
        { print }
        END { if (!found) print update >>FILENAME }
        EOF

- hosts: kvm
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        {% if ee_version is version('6.0', '>=') %}
        apt-get -q install -y uuid-runtime opennebula-node-kvm
        {% else %}
        apt-get -q install -y uuid-runtime opennebula-node
        {% endif %}

    - shell: |
        set -o errexit
        gawk -i inplace -f- /etc/libvirt/libvirtd.conf <<'EOF'
        BEGIN { "uuidgen" | getline uuid; update = "host_uuid = \"" uuid "\"" }
        /^#*host_uuid = "00000000-0000-0000-0000-000000000000"/ { $0 = update; found = 1 }
        { print }
        END { if (!found) print update >>FILENAME }
        EOF

    - shell: |
        set -o errexit
        systemctl restart libvirtd
        if virsh net-dumpxml default; then
          virsh net-destroy default
          virsh net-undefine default
        fi

- hosts: lxc
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y opennebula-node-lxc

- hosts: firecracker
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y opennebula-node-firecracker

- hosts: kvm:firecracker:lxc
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    #- shell: |
    #    set -o errexit
    #    cat >/etc/systemd/network/br0.netdev <<'EOF'
    #    [NetDev]
    #    Name=br0
    #    Kind=bridge
    #    EOF
    #    cat >/etc/systemd/network/br0.network <<'EOF'
    #    [Match]
    #    Name=br0
    #    [Network]
    #    Address=172.20.0.1/24
    #    IPForward=ipv4
    #    IPMasquerade=yes
    #    ConfigureWithoutCarrier=yes
    #    [Link]
    #    ActivationPolicy=always-up
    #    EOF
    #    systemctl enable systemd-networkd
    #    systemctl restart systemd-networkd
    #  args:
    #    creates: /etc/systemd/network/br0.network

    - shell: |
        set -o errexit
        cat >/etc/systemd/network/br1.netdev <<'EOF'
        [NetDev]
        Name=br1
        Kind=bridge
        EOF
        cat >/etc/systemd/network/br1.network <<'EOF'
        [Match]
        Name=br1
        [Network]
        Address=172.20.1.1/24
        IPForward=ipv4
        IPMasquerade=no
        ConfigureWithoutCarrier=yes
        [Link]
        ActivationPolicy=always-up
        EOF
        systemctl enable systemd-networkd
        systemctl restart systemd-networkd
      args:
        creates: /etc/systemd/network/br1.network

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        onevnet show "skynet" || onevnet create /dev/fd/0 <<'EOF'
        NAME   = "skynet"
        VN_MAD = "bridge"
        BRIDGE = "br0"
        AR = [
          TYPE = "IP4",
          IP   = "10.2.11.200",
          SIZE = "48" ]
        NETWORK_ADDRESS = "10.2.11.0"
        NETWORK_MASK    = "255.255.255.0"
        GATEWAY         = "10.2.11.1"
        DNS             = "1.1.1.1"
        SEARCH_DOMAIN   = "skynet.lh"
        EOF

    - shell: |
        set -o errexit
        onevnet show "legion" || onevnet create /dev/fd/0 <<'EOF'
        NAME   = "legion"
        VN_MAD = "bridge"
        BRIDGE = "br1"
        AR = [
          TYPE = "IP4",
          IP   = "172.20.1.100",
          SIZE = "100" ]
        NETWORK_ADDRESS = "172.20.1.0"
        NETWORK_MASK    = "255.255.255.0"
        GATEWAY         = "172.20.1.1"
        DNS             = "1.1.1.1"
        SEARCH_DOMAIN   = "legion.lh"
        EOF

    - shell: |
        set -o errexit
        oneuser update oneadmin -a /dev/fd/0 <<'EOF'
        SSH_PUBLIC_KEY = "{{ ssh_public_key }}"
        EOF

    - shell: |
        set -o errexit
        onemarketapp export 'Alpine Linux 3.14' alpine314 --datastore default || true
        onetemplate update -a alpine314 /dev/fd/0 <<'EOF'
        NIC = [
          NETWORK_ID = "0",
          SECURITY_GROUPS = "0" ]
        EOF

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  pre_tasks:
    - authorized_key:
        user: "{{ item }}"
        key: "{{ ssh_public_key }}"
        state: present
      loop:
        - oneadmin
        - one

    - copy:
        dest: /var/lib/one/.ssh/config
        owner: oneadmin
        group: oneadmin
        mode: u=rw,go=
        content: |
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - slurp:
        src: /var/lib/one/.ssh/id_rsa.pub
      register: slurp_id_rsa_pub

    - authorized_key:
        user: oneadmin
        key: "{{ slurp_id_rsa_pub.content | b64decode }}"
        state: present
      delegate_to: "{{ item }}"
      loop: >-
        {{ (groups.kvm         | default([]))
         + (groups.lxc         | default([]))
         + (groups.firecracker | default([])) }}

    - shell: |
        set -o errexit
        {% for host in (groups.kvm | default([])) %}
        onehost show {{ host }} || onehost create {{ host }} -i kvm -v kvm
        {% endfor %}

    - shell: |
        set -o errexit
        {% for host in (groups.lxc | default([])) %}
        onehost show {{ host }} || onehost create {{ host }} -i lxc -v lxc
        {% endfor %}

    - shell: |
        set -o errexit
        {% for host in (groups.firecracker | default([])) %}
        onehost show {{ host }} || onehost create {{ host }} -i firecracker -v firecracker
        {% endfor %}
