---
- hosts: all
  module_defaults: &module_defaults
    shell: { executable: /bin/bash }
  environment: &environment
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - shell: |
        set -o errexit -o pipefail
        curl -fsSL https://downloads.opennebula.io/repo/repo.key | apt-key add -

    - copy:
        dest: /etc/apt/sources.list.d/opennebula.list
        content: |
          deb https://{{ ee_token }}@enterprise.opennebula.io/repo/{{ ee_version }}/Ubuntu/20.04 stable opennebula

    - shell: |
        set -o errexit
        apt-get -q update -y

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y mariadb-server
        systemctl start mariadb.service

    - shell: |
        set -o errexit
        mysql -u root <<< "CREATE DATABASE IF NOT EXISTS opennebula CHARACTER SET utf8 COLLATE utf8_general_ci;"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'%' IDENTIFIED BY 'asd';"
        mysql -u root <<< "GRANT ALL PRIVILEGES ON *.* TO 'oneadmin'@'localhost' IDENTIFIED BY 'asd';"
        mysql -u root <<< "SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;"

- hosts: opennebula
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y opennebula{,-flow,-gate,-provision,-rubygems,-sunstone}
        {% if ee_version is version('5.13', '>=') %}
        apt-get -q install -y opennebula-fireedge
        {% endif %}

    - user:
        name: one
        home: /home/one
        shell: /bin/bash
        system: false

    - shell: |
        set -o errexit
        if ! grep '^oneadmin:asd$' {{ item.home }}/.one/one_auth; then
          install -o {{ item.owner }} -g {{ item.group }} -m u=rwx,g=rx,o= -d {{ item.home }}/.one/
          install -o {{ item.owner }} -g {{ item.group }} -m u=rw,g=r,o= /dev/fd/0 {{ item.home }}/.one/one_auth <<< 'oneadmin:asd'
        fi
      loop:
        - { owner: oneadmin, group: oneadmin, home: /var/lib/one/ }
        - { owner: one     , group: one     , home: /home/one/    }

    - vars:
        DB: |
          DB = [ backend = "mysql",
                 server = "localhost",
                 port = 0,
                 user = "oneadmin",
                 passwd = "asd",
                 db_name = "opennebula" ]
      shell: |
        set -o errexit
        sed -i '/^DB = \[ BACKEND = "sqlite" \]/d' /etc/one/oned.conf
        if ! grep ^DB /etc/one/oned.conf; then
          echo "{{ DB }}" >> /etc/one/oned.conf
        fi

    - shell: |
        set -o errexit
        if ! grep '^:host: "{{ _endpoint }}"' /etc/one/oneflow-server.conf; then
          sed -i '/^:host:/d' /etc/one/oneflow-server.conf
          echo ':host: "{{ _endpoint }}"' >> /etc/one/oneflow-server.conf
        fi
      vars:
        _endpoint: "0.0.0.0"

    - shell: |
        set -o errexit
        if ! grep '^:host: "{{ _endpoint }}"' /etc/one/onegate-server.conf; then
          sed -i '/^:host:/d' /etc/one/onegate-server.conf
          echo ':host: "{{ _endpoint }}"' >> /etc/one/onegate-server.conf
        fi
      vars:
        _endpoint: "0.0.0.0"

    - shell: |
        set -o errexit
        if ! grep '^ONEGATE_ENDPOINT = "{{ _endpoint }}"' /etc/one/oned.conf; then
          sed -i '/^ONEGATE_ENDPOINT/d' /etc/one/oned.conf
          echo 'ONEGATE_ENDPOINT = "{{ _endpoint }}"' >> /etc/one/oned.conf
        fi
      vars:
        _endpoint: "http://{{ hostvars[groups.opennebula.0].ansible_host }}:5030"

    - shell: |
        set -o errexit
        if ! grep '^:public_fireedge_endpoint: "{{ _endpoint }}"' /etc/one/sunstone-server.conf; then
          sed -i '/^:public_fireedge_endpoint:/d' /etc/one/sunstone-server.conf
          echo ':public_fireedge_endpoint: "{{ _endpoint }}"' >> /etc/one/sunstone-server.conf
        fi
      vars:
        _endpoint: "http://{{ hostvars[groups.opennebula.0].ansible_host }}:2616"

    - shell: |
        set -o errexit
        systemctl enable opennebula{,-flow,-gate,-sunstone}
        systemctl restart opennebula{,-flow,-gate,-sunstone}
        {% if ee_version is version('5.13', '>=') %}
        systemctl enable opennebula-fireedge
        systemctl restart opennebula-fireedge
        {% endif %}

- hosts: opennebula_node_kvm
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - shell: |
        set -o errexit
        apt-get -q install -y opennebula-node-kvm

    - shell: |
        set -o errexit
        systemctl restart libvirtd
        if virsh net-dumpxml default; then
          virsh net-destroy default
          virsh net-undefine default
        fi

    - shell: |
        set -o errexit
        cat >/etc/systemd/network/br0.netdev <<'EOF'
        [NetDev]
        Name=br0
        Kind=bridge
        EOF
        cat >/etc/systemd/network/br0.network <<'EOF'
        [Match]
        Name=br0
        [Network]
        Address=172.20.0.1/24
        IPForward=ipv4
        IPMasquerade=yes
        ConfigureWithoutCarrier=yes
        [Link]
        ActivationPolicy=always-up
        EOF
        systemctl enable systemd-networkd
        systemctl restart systemd-networkd
      args:
        creates: /etc/systemd/network/br0.network

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - copy:
        dest: /tmp/service_vnet
        content: |
          NAME   = "service"
          VN_MAD = "bridge"
          BRIDGE = "br0"
          AR = [
            TYPE = "IP4",
            IP   = "172.20.0.100",
            SIZE = "100" ]
          NETWORK_ADDRESS = "172.20.0.0"
          NETWORK_MASK    = "255.255.255.0"
          GATEWAY         = "172.20.0.1"
          DNS             = "1.1.1.1"
          SEARCH_DOMAIN   = "ubuntu.lh"

    - shell: |
        set -o errexit
        if ! onevntemplate show service; then
          onevntemplate create /tmp/service_vnet
        fi
        if ! onevnet show service; then
          onevntemplate instantiate service --name service
        fi

    - shell: |
        set -o errexit
        oneuser update oneadmin -a /dev/fd/0 <<'EOF'
        SSH_PUBLIC_KEY = "{{ ssh_public_key }}"
        EOF

    - shell: |
        set -o errexit
        onemarketapp export 'Alpine Linux 3.14' alpine314 --datastore default || true
        onetemplate update -a alpine314 /dev/fd/0 <<'EOF'
        NIC = [
          NETWORK_ID = "0",
          SECURITY_GROUPS = "0" ]
        EOF

- hosts: opennebula
  module_defaults: *module_defaults
  environment: *environment
  pre_tasks:
    - authorized_key:
        user: "{{ item }}"
        key: "{{ ssh_public_key }}"
        state: present
      loop:
        - oneadmin
        - one

    - copy:
        dest: /var/lib/one/.ssh/config
        owner: oneadmin
        group: oneadmin
        mode: u=rw,go=
        content: |
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null

- hosts: opennebula[0]
  module_defaults: *module_defaults
  environment: *environment
  tasks:
    - slurp:
        src: /var/lib/one/.ssh/id_rsa.pub
      register: slurp_id_rsa_pub

    - authorized_key:
        user: oneadmin
        key: "{{ slurp_id_rsa_pub.content | b64decode }}"
        state: present
      delegate_to: "{{ item }}"
      loop: "{{ groups.opennebula_node_kvm }}"

    - shell: |
        set -o errexit
        {% for host in groups.opennebula_node_kvm %}
        if ! onehost show {{ host }}; then
          onehost create {{ host }} -i kvm -v kvm
        fi
        {% endfor %}
